// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Wallet {
  // generic columns
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // columns
  publicKey String @unique @map("public_key")

  // relations
  addresses Address[]
  members   Member[]

  // meta
  @@map("wallets")
}

//
// Notifications & Subscriptions
//

model Address {
  // generic columns
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // columns
  type             String // e.g. 'email', 'telegram', 'sms', etc. TODO: Make this an enum, perhaps only at the server level, not db
  value            String // e.g. 'chris@dialect.to', '@chrisoss', etc.
  verificationCode String? @map("verification_code") // 6-digit number code
  verified         Boolean @default(false)

  // relations
  walletId      String        @map("wallet_id") @db.Uuid
  wallet        Wallet        @relation(fields: [walletId], references: [id])
  dappAddresses DappAddress[]

  // constraints

  // meta
  @@unique([walletId, type])
  @@map("addresses")
}

model Dapp {
  // generic columns
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // columns
  publicKey   String  @unique @map("public_key")
  telegramKey String? @map("telegram_key")

  // relations
  dappAddresses DappAddress[]

  // meta
  @@map("dapps")
}

model DappAddress {
  // generic columns
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // columns
  enabled  Boolean
  metadata Json?

  // relations
  addressId String  @map("address_id") @db.Uuid
  address   Address @relation(fields: [addressId], references: [id])
  dappId    String  @map("dapp_id") @db.Uuid
  dapp      Dapp    @relation(fields: [dappId], references: [id])

  // constraints

  // meta
  @@unique([addressId, dappId])
  @@map("dapp_addresses")
}

//
// Dialects
//

model Dialect {
  // generic columns
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // columns
  publicKey String  @unique @map("public_key")
  encrypted Boolean

  // relations
  members  Member[]
  messages Message[]

  // meta
  @@map("dialects")
}

model Member {
  // generic columns
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  scopes Scope[]

  // relations
  dialectId String    @map("dialect_id") @db.Uuid
  dialect   Dialect   @relation(fields: [dialectId], references: [id])
  walletId  String    @map("wallet_id") @db.Uuid
  wallet    Wallet    @relation(fields: [walletId], references: [id])
  messages  Message[]

  // meta
  @@map("members")
}

enum Scope {
  ADMIN
  WRITE
}

model Message {
  // generic columns
  id String @id @default(uuid()) @db.Uuid

  // columns
  timestamp DateTime @default(now())
  text      Bytes    @db.ByteA

  // relations
  dialectId String  @map("dialect_id") @db.Uuid
  dialect   Dialect @relation(fields: [dialectId], references: [id])
  // TODO: Should this be a wallet relation? E.g. persist past messages even if author is removed as a member.
  memberId  String  @map("member_id") @db.Uuid
  member    Member  @relation(fields: [memberId], references: [id])

  // meta
  @@map("messages")
}
